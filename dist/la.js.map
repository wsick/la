{"version":3,"sources":["_version.ts","ellipse.ts","EPSILON.ts","mat3.ts","padding.ts","vec2.ts","rect.ts"],"names":[],"mappings":"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","file":"la.js","sourcesContent":["namespace la {\r\n    export var version = '0.2.5';\r\n}","namespace la {\n    var PI2 = 2 * Math.PI;\n    var PI1_2 = Math.PI / 2;\n\n    export interface IEllipse {\n        cx: number;\n        cy: number;\n        rx: number;\n        ry: number;\n        phi: number;\n        x(theta: number): number;\n        y(theta: number): number;\n        point(theta: number): Float32Array;\n        normal(theta: number): Float32Array;\n        tangent(theta: number): Float32Array;\n        /// Find ellipse extrema within arc defined by [start angle, end angle] sweeping anti-clockwise/clockwise\n        /// [0] and [1] will be vertical tangents\n        /// [2] and [3] will be horizontal tangents\n        /// If not contained within arc, points will be null\n        extrema(sa: number, ea: number, ac: boolean): Float32Array[];\n    }\n    export function ellipse(cx: number, cy: number, rx: number, ry: number, phi: number): IEllipse {\n        var sphi = Math.sin(phi);\n        var cphi = Math.cos(phi);\n\n        var da = rx * cphi;\n        var db = -ry * sphi;\n        var dc = rx * sphi;\n        var dd = ry * cphi;\n\n        function flatTangentAngles(): number[] {\n            // vertical tangent [tan(theta) = b/a]\n            // 2 angles on opposite side of ellipse\n            var va1 = Math.atan2(db, da);\n            if (va1 < 0)\n                va1 += PI2;\n            var va2 = va1 >= Math.PI ? va1 - Math.PI : va1 + Math.PI;\n\n            // horizontal tangent [tan(theta) = d/c]\n            // 2 angles on opposite side of ellipse\n            var ha1 = Math.atan2(dd, dc);\n            if (ha1 < 0)\n                ha1 += PI2;\n            var ha2 = ha1 >= Math.PI ? ha1 - Math.PI : ha1 + Math.PI;\n\n            return [va1, va2, ha1, ha2];\n        }\n\n        function normalizeAngle(angle: number): number {\n            angle = angle % PI2;\n            if (angle < 0)\n                angle += PI2;\n            return angle;\n        }\n\n        var e = {\n            cx: cx,\n            cy: cy,\n            rx: rx,\n            ry: ry,\n            phi: phi,\n            x(theta: number): number {\n                var stheta = Math.sin(theta);\n                var ctheta = Math.cos(theta);\n                return (cphi * rx * ctheta) + (-sphi * ry * stheta) + cx;\n            },\n            y(theta: number): number {\n                var stheta = Math.sin(theta);\n                var ctheta = Math.cos(theta);\n                return (sphi * rx * ctheta) + (cphi * ry * stheta) + cy;\n            },\n            point(theta: number): Float32Array {\n                return vec2.create(e.x(theta), e.y(theta));\n            },\n            normal(theta: number): Float32Array {\n                return vec2.rotate(e.tangent(theta), -PI1_2);\n            },\n            tangent(theta: number): Float32Array {\n                var stheta = Math.sin(theta);\n                var ctheta = Math.cos(theta);\n                return vec2.create(\n                    (-da * stheta) + (db * ctheta),\n                    (-dc * stheta) + (dd * ctheta)\n                );\n            },\n            extrema(sa: number, ea: number, ac: boolean): Float32Array[] {\n                var da = ea - sa;\n                var sa = normalizeAngle(sa);\n                var ea = normalizeAngle(ea);\n\n                var isContained: (theta: number) => boolean;\n                if (sa < ea) {\n                    if (ac === true) {\n                        isContained = (theta) => (0 <= theta && theta <= sa) || (ea <= theta && theta <= PI2);\n                    } else {\n                        isContained = (theta) => sa <= theta && theta <= ea;\n                    }\n                } else if (sa > ea) {\n                    if (ac === true) {\n                        isContained = (theta) => ea <= theta && theta <= sa;\n                    } else {\n                        isContained = (theta) => (0 <= theta && theta <= ea) || (sa <= theta && theta <= PI2);\n                    }\n                } else {\n                    if (da > 0) {\n                        isContained = (theta) => true;\n                    } else {\n                        isContained = (theta) => false;\n                    }\n                }\n\n                var [va1, va2, ha1, ha2] = flatTangentAngles();\n                return [\n                    (isContained(va1)) ? e.point(va1) : null,\n                    (isContained(va2)) ? e.point(va2) : null,\n                    (isContained(ha1)) ? e.point(ha1) : null,\n                    (isContained(ha2)) ? e.point(ha2) : null,\n                ];\n            }\n        };\n        return e;\n    }\n}\n","namespace la {\n    export var EPSILON = 1E-6;\n}","namespace la.mat3 {\n    /// NOTE:\n    ///     Row-major order\n    ///     [m11, m12, m21, m22, x0, y0]\n    export function create(src?: number[]|Float32Array): Float32Array {\n        var dest = new Float32Array(6);\n\n        if (src) {\n            dest[0] = src[0];\n            dest[1] = src[1];\n            dest[2] = src[2];\n            dest[3] = src[3];\n            dest[4] = src[4];\n            dest[5] = src[5];\n        } else {\n            dest[0] = dest[1] = dest[2] = dest[3] = dest[4] = dest[5] = 0;\n        }\n\n        return dest;\n    }\n\n    export function copyTo(src: Float32Array, dest: Float32Array): Float32Array {\n        dest[0] = src[0];\n        dest[1] = src[1];\n        dest[2] = src[2];\n        dest[3] = src[3];\n        dest[4] = src[4];\n        dest[5] = src[5];\n        return dest;\n    }\n\n    export function init(dest: Float32Array, m11: number, m12: number, m21: number, m22: number, x0: number, y0: number): Float32Array {\n        dest[0] = m11;\n        dest[1] = m12;\n        dest[2] = m21;\n        dest[3] = m22;\n        dest[4] = x0;\n        dest[5] = y0;\n        return dest;\n    }\n\n    export function identity(dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        dest[0] = 1;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = 1;\n        dest[4] = 0;\n        dest[5] = 0;\n        return dest;\n    }\n\n    export function equal(a: Float32Array, b: Float32Array): boolean {\n        return a === b || (\n                Math.abs(a[0] - b[0]) < EPSILON &&\n                Math.abs(a[1] - b[1]) < EPSILON &&\n                Math.abs(a[2] - b[2]) < EPSILON &&\n                Math.abs(a[3] - b[3]) < EPSILON &&\n                Math.abs(a[4] - b[4]) < EPSILON &&\n                Math.abs(a[5] - b[5]) < EPSILON\n            );\n    }\n\n    // dest = a * b\n    export function multiply(a: Float32Array, b: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = a;\n        var a11 = a[0], a12 = a[1],\n            a21 = a[2], a22 = a[3],\n            ax0 = a[4], ay0 = a[5],\n            b11 = b[0], b12 = b[1],\n            b21 = b[2], b22 = b[3],\n            bx0 = b[4], by0 = b[5];\n\n        dest[0] = a11 * b11 + a12 * b21;\n        dest[1] = a11 * b12 + a12 * b22;\n\n        dest[2] = a21 * b11 + a22 * b21;\n        dest[3] = a21 * b12 + a22 * b22;\n\n        dest[4] = a11 * bx0 + a12 * by0 + ax0;\n        dest[5] = a21 * bx0 + a22 * by0 + ay0;\n\n        return dest;\n    }\n\n    export function inverse(mat: Float32Array, dest?: Float32Array): Float32Array {\n        if (Math.abs(mat[1]) < EPSILON && Math.abs(mat[2]) < EPSILON) //Simple scaling/translation matrix\n            return simple_inverse(mat, dest);\n        else\n            return complex_inverse(mat, dest);\n    }\n\n    export function transformVec2(mat: Float32Array, vec: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = vec;\n        var x = vec[0],\n            y = vec[1];\n        dest[0] = (mat[0] * x) + (mat[1] * y) + mat[4];\n        dest[1] = (mat[2] * x) + (mat[3] * y) + mat[5];\n        return dest;\n    }\n\n    export function transformVec2s(mat: Float32Array, ...vecs: Float32Array[]) {\n        for (var i = vecs.length - 1; i >= 0; i--) {\n            transformVec2(mat, vecs[i]);\n        }\n    }\n\n    export function createTranslate(x: number, y: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        dest[0] = 1;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = 1;\n        dest[4] = x;\n        dest[5] = y;\n        return dest;\n    }\n\n    export function translate(mat: Float32Array, x: number, y: number): Float32Array {\n        mat[4] += x;\n        mat[5] += y;\n        return mat;\n    }\n\n    export function createScale(sx: number, sy: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        dest[0] = sx;\n        dest[1] = 0;\n        dest[2] = 0;\n        dest[3] = sy;\n        dest[4] = 0;\n        dest[5] = 0;\n        return dest;\n    }\n\n    export function scale(mat: Float32Array, sx: number, sy: number): Float32Array {\n        mat[0] *= sx;\n        mat[2] *= sx;\n        mat[4] *= sx;\n\n        mat[1] *= sy;\n        mat[3] *= sy;\n        mat[5] *= sy;\n        return mat;\n    }\n\n    export function createRotate(angleRad: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        var c = Math.cos(angleRad);\n        var s = Math.sin(angleRad);\n        dest[0] = c;\n        dest[1] = -s;\n        dest[2] = s;\n        dest[3] = c;\n        dest[4] = 0;\n        dest[5] = 0;\n        return dest;\n    }\n\n    export function createSkew(angleRadX: number, angleRadY: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = create();\n        dest[0] = 1;\n        dest[1] = Math.tan(angleRadX);\n        dest[2] = Math.tan(angleRadY);\n        dest[3] = 1;\n        dest[4] = 0;\n        dest[5] = 0;\n        return dest;\n    }\n\n    export function preapply(dest: Float32Array, mat: Float32Array): Float32Array {\n        return multiply(dest, mat, dest);\n    }\n\n    export function apply(dest: Float32Array, mat: Float32Array): Float32Array {\n        return multiply(mat, dest, dest);\n    }\n\n    function simple_inverse(mat: Float32Array, dest?: Float32Array): Float32Array {\n        var m11 = mat[0];\n        if (Math.abs(m11) < EPSILON)\n            return null;\n\n        var m22 = mat[3];\n        if (Math.abs(m22) < EPSILON)\n            return null;\n\n        if (!dest) {\n            dest = mat;\n        } else {\n            dest[1] = mat[1];\n            dest[2] = mat[2];\n        }\n\n        var x0 = -mat[4];\n        var y0 = -mat[5];\n        if (Math.abs(m11 - 1) > EPSILON) {\n            m11 = 1 / m11;\n            x0 *= m11;\n        }\n        if (Math.abs(m22 - 1) > EPSILON) {\n            m22 = 1 / m22;\n            y0 *= m22;\n        }\n\n        dest[0] = m11;\n        dest[3] = m22;\n        dest[4] = x0;\n        dest[5] = y0;\n        return dest;\n    }\n\n    function complex_inverse(mat: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = mat;\n\n        var m11 = mat[0], m12 = mat[1],\n            m21 = mat[2], m22 = mat[3];\n\n        //inv(A) = 1/det(A) * adj(A)\n        var det = m11 * m22 - m12 * m21;\n        if (det === 0 || !isFinite(det))\n            return null;\n        var id = 1 / det;\n\n        var x0 = mat[4], y0 = mat[5];\n\n        dest[0] = m22 * id;\n        dest[1] = -m12 * id;\n        dest[2] = -m21 * id;\n        dest[3] = m11 * id;\n        dest[4] = (m21 * y0 - m22 * x0) * id;\n        dest[5] = (m12 * x0 - m11 * y0) * id;\n        return dest;\n    }\n}","namespace la.padding {\n    export function init(l: number, t: number, r: number, b: number, dest?: IPadding): IPadding {\n        if (!dest)\n            return {left: l, top: t, right: r, bottom: b};\n        dest.left = l;\n        dest.top = t;\n        dest.right = r;\n        dest.bottom = b;\n        return dest;\n    }\n\n    export function copyTo(src: IPadding, dest?: IPadding): IPadding {\n        if (!dest) {\n            return {\n                left: src.left,\n                top: src.top,\n                right: src.right,\n                bottom: src.bottom\n            };\n        } else {\n            dest.left = src.left;\n            dest.top = src.top;\n            dest.right = src.right;\n            dest.bottom = src.bottom;\n            return dest;\n        }\n    }\n\n    export function equal(r1: IPadding, r2: IPadding): boolean {\n        return r1.left === r2.left\n            && r1.top === r2.top\n            && r1.right === r2.right\n            && r1.bottom === r2.bottom;\n    }\n\n    export function isEmpty(src: IPadding): boolean {\n        return src.left === 0\n            && src.top === 0\n            && src.right === 0\n            && src.bottom === 0;\n    }\n}","namespace la.vec2 {\n    export function create(x: number, y: number): Float32Array {\n        var dest = new Float32Array(2);\n        dest[0] = x;\n        dest[1] = y;\n        return dest;\n    }\n\n    export function init(x: number, y: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = new Float32Array(2);\n        dest[0] = x;\n        dest[1] = y;\n        return dest;\n    }\n\n    export function clone(src: Float32Array, dest?: Float32Array): Float32Array {\n        return init(src[0], src[1], dest);\n    }\n\n    export function reverse(src: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = src;\n        dest[0] = -src[0];\n        dest[1] = -src[1];\n        return dest;\n    }\n\n    /// Equivalent of rotating 90 degrees clockwise (screen space)\n    export function orthogonal(src: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = src;\n        var x = src[0],\n            y = src[1];\n        dest[0] = -y;\n        dest[1] = x;\n        return dest;\n    }\n\n    export function normalize(src: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = src;\n        var x = src[0],\n            y = src[1];\n        var len = Math.sqrt(x * x + y * y);\n        dest[0] = x / len;\n        dest[1] = y / len;\n        return dest;\n    }\n\n    /// Rotates a vector(v) by angle(theta) clockwise(screen space) ...which is counter-clockwise in coordinate space\n    export function rotate(src: Float32Array, theta: number, dest?: Float32Array): Float32Array {\n        if (!dest) dest = src;\n        var c = Math.cos(theta);\n        var s = Math.sin(theta);\n        var x = src[0];\n        var y = src[1];\n        dest[0] = x * c - y * s;\n        dest[1] = x * s + y * c;\n        return dest;\n    }\n\n    /// Computes the midpoint between 2 points\n    export function midpoint(p1: Float32Array, p2: Float32Array, dest?: Float32Array): Float32Array {\n        if (!dest) dest = p1;\n        var x1 = p1[0],\n            y1 = p1[1],\n            x2 = p2[0],\n            y2 = p2[1];\n        dest[0] = (x1 + x2) / 2.0;\n        dest[1] = (y1 + y2) / 2.0;\n        return dest;\n    }\n\n    /// Returns smallest angle (in radians) between 2 vectors\n    export function angleBetween(u: Float32Array, v: Float32Array): number {\n        var ux = u[0],\n            uy = u[1],\n            vx = v[0],\n            vy = v[1];\n        var num = ux * vx + uy * vy;\n        var den = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n        return Math.acos(num / den);\n    }\n\n    /// By rotating from vector(v1) to vector(v2), tests whether that angle is clockwise (screen space)\n    export function isClockwiseTo(v1: Float32Array, v2: Float32Array): boolean {\n        var theta = angleBetween(v1, v2);\n        var nv1 = normalize(clone(v1));\n        var nv2 = normalize(clone(v2));\n        rotate(nv1, theta);\n        var nx = Math.abs(nv1[0] - nv2[0]);\n        var ny = Math.abs(nv1[1] - nv2[1]);\n        return nx < EPSILON\n            && ny < EPSILON;\n    }\n\n    /// Finds intersection of v1(s1 + t(d1)) and v2(s2 + t(d2))\n    export function intersection(s1: Float32Array, d1: Float32Array, s2: Float32Array, d2: Float32Array): Float32Array {\n        var x1 = s1[0];\n        var y1 = s1[1];\n        var x2 = x1 + d1[0];\n        var y2 = y1 + d1[1];\n\n        var x3 = s2[0];\n        var y3 = s2[1];\n        var x4 = x3 + d2[0];\n        var y4 = y3 + d2[1];\n\n        var det = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);\n        if (det === 0)\n            return null;\n\n        var xn = ((x1 * y2 - y1 * x2) * (x3 - x4)) - ((x1 - x2) * (x3 * y4 - y3 * x4));\n        var yn = ((x1 * y2 - y1 * x2) * (y3 - y4)) - ((y1 - y2) * (x3 * y4 - y3 * x4));\n        return vec2.create(xn / det, yn / det);\n    }\n}","/// <reference path=\"vec2\" />\n\nnamespace la.rect {\n    export function init(x: number, y: number, width: number, height: number, dest?: IRect): IRect {\n        if (!dest)\n            return {x: x, y: y, width: width, height: height};\n        dest.x = x;\n        dest.y = y;\n        dest.width = width;\n        dest.height = height;\n        return dest;\n    }\n\n    export function copyTo(src: IRect, dest?: IRect): IRect {\n        if (!dest) {\n            return {\n                x: src.x,\n                y: src.y,\n                width: src.width,\n                height: src.height\n            };\n        } else {\n            dest.x = src.x;\n            dest.y = src.y;\n            dest.width = src.width;\n            dest.height = src.height;\n            return dest;\n        }\n    }\n\n    var p1 = vec2.create(0, 0);\n    var p2 = vec2.create(0, 0);\n    var p3 = vec2.create(0, 0);\n    var p4 = vec2.create(0, 0);\n\n    export function transform(src: IRect, transform: Float32Array, dest?: IRect): IRect {\n        if (!transform)\n            return dest;\n        if (!dest)\n            dest = <IRect>{x: 0, y: 0, width: 0, height: 0};\n\n        var x = src.x;\n        var y = src.y;\n        var w = src.width;\n        var h = src.height;\n\n        vec2.init(x, y, p1);\n        vec2.init(x + w, y, p2);\n        vec2.init(x + w, y + h, p3);\n        vec2.init(x, y + h, p4);\n\n        mat3.transformVec2(transform, p1);\n        mat3.transformVec2(transform, p2);\n        mat3.transformVec2(transform, p3);\n        mat3.transformVec2(transform, p4);\n\n        var l = Math.min(p1[0], p2[0], p3[0], p4[0]);\n        var t = Math.min(p1[1], p2[1], p3[1], p4[1]);\n        var r = Math.max(p1[0], p2[0], p3[0], p4[0]);\n        var b = Math.max(p1[1], p2[1], p3[1], p4[1]);\n\n        dest.x = l;\n        dest.y = t;\n        dest.width = r - l;\n        dest.height = b - t;\n        return dest;\n    }\n\n    export function equal(r1: IRect, r2: IRect): boolean {\n        return r1.x === r2.x\n            && r1.y === r2.y\n            && r1.width === r2.width\n            && r1.height === r2.height;\n    }\n\n    export function isEmpty(src: IRect): boolean {\n        return src.width === 0\n            || src.height === 0;\n    }\n\n    // NOTE: If dest is not specified, r1 will be used dest\n    export function union(r1: IRect, r2: IRect, dest?: IRect): IRect {\n        if (!dest) dest = r1;\n        if (r2.width <= 0 || r2.height <= 0)\n            return dest;\n        if (dest.width <= 0 || dest.height <= 0)\n            return rect.copyTo(r2, dest);\n\n        var x1 = r1.x, x2 = r2.x,\n            y1 = r1.y, y2 = r2.y,\n            w1 = r1.width, w2 = r2.width,\n            h1 = r1.height, h2 = r2.height;\n\n        dest.x = Math.min(x1, x2);\n        dest.y = Math.min(y1, y2);\n        dest.width = Math.max(x1 + w1, x2 + w2) - dest.x;\n        dest.height = Math.max(y1 + h1, y2 + h2) - dest.y;\n        return dest;\n    }\n\n    // NOTE: If dest is not specified, r1 will be used dest\n    export function intersection(r1: IRect, r2: IRect, dest?: IRect): IRect {\n        if (!dest) dest = r1;\n        var x = Math.max(r1.x, r2.x);\n        var y = Math.max(r1.y, r2.y);\n        dest.width = Math.max(0, Math.min(r1.x + r1.width, r2.x + r2.width) - x);\n        dest.height = Math.max(0, Math.min(r1.y + r1.height, r2.y + r2.height) - y);\n        dest.x = x;\n        dest.y = y;\n        return dest;\n    }\n\n    export function isContainedIn(src: IRect, test: IRect): boolean {\n        var sl = src.x;\n        var st = src.y;\n        var sr = src.x + src.width;\n        var sb = src.y + src.height;\n\n        var tl = test.x;\n        var tt = test.y;\n        var tr = test.x + test.width;\n        var tb = test.y + test.height;\n\n        if (sl < tl || st < tt || sl > tr || st > tb) //src top-left is outside test\n            return false;\n        if (sr < tl || sb < tt || sr > tr || sb > tb) //src bottom-right is outside test\n            return false;\n        return true;\n    }\n\n    export function containsPoint(rect1: IRect, p: IPoint): boolean {\n        return rect1.x <= p.x\n            && rect1.y <= p.y\n            && (rect1.x + rect1.width) >= p.x\n            && (rect1.y + rect1.height) >= p.y;\n    }\n\n    export function containsVec2(rect1: IRect, v: Float32Array): boolean {\n        var vx = v[0],\n            vy = v[1];\n        return rect1.x <= vx\n            && rect1.y <= vy\n            && (rect1.x + rect1.width) >= vx\n            && (rect1.y + rect1.height) >= vy;\n    }\n\n    export function roundOut(dest: IRect) {\n        var x = Math.floor(dest.x);\n        var y = Math.floor(dest.y);\n        dest.width = Math.ceil(dest.x + dest.width) - x;\n        dest.height = Math.ceil(dest.y + dest.height) - y;\n        dest.x = x;\n        dest.y = y;\n    }\n\n    export function roundIn(dest: IRect) {\n        var x = Math.ceil(dest.x);\n        var y = Math.ceil(dest.y);\n        dest.width = Math.floor(dest.x + dest.width) - x;\n        dest.height = Math.floor(dest.y + dest.height) - y;\n        dest.x = x;\n        dest.y = y;\n        return dest;\n    }\n\n    // NOTE: If dest is not specified, src will be used for dest\n    export function grow(src: IRect, padding: IPadding, dest?: IRect) {\n        if (!dest) dest = src;\n        dest.x -= padding.left;\n        dest.y -= padding.top;\n        dest.width += padding.left + padding.right;\n        dest.height += padding.top + padding.bottom;\n    }\n\n    // NOTE: If dest is not specified, src will be used for dest\n    export function shrink(src: IRect, padding: IPadding, dest?: IRect) {\n        if (!dest) dest = src;\n        dest.x += padding.left;\n        dest.y += padding.top;\n        dest.width -= padding.left + padding.right;\n        dest.height -= padding.top + padding.bottom;\n    }\n}"],"sourceRoot":"./src"}